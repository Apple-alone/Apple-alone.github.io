[
  {
    "objectID": "90816e2b579f71656efd01e23474af71ddd9be17",
    "permalink": "/post/aquadx-server-bulid/",
    "title": "如何建立Sega游戏服务器","content": "\r前言\r很多地方都没有这个搭建教程，，根据官方文档说搭建服务器要有一定的技术\n是的你觉得你是电子文盲我的建议就是不用搭建了（x\n目前开源的服务器有 ARTEMIS 和 AquaDX\n在这里我分享的文件均不能外传！\n在使用请遵循每个服务器的开源协议\n准备环境\rARTEMiS 服务端支持比较老的游戏版本，AquaDX支持比较新的游戏版本\n具体支持版本请看每个仓库的自述文件 ARTEMIS AquaDX\n然后来准备环境\nAquaDX ARTEMIS 编译环境 Java Python 其他环境 Docker Docker 自行准备环境\n选择好服务端后开始准备文件\nAquaDX 配置和部署\r部署的方式有两种\nDocker 直接部署 编译成 Jar 后部署 使用Docker更快更自动化，并且更好管理，这里我以Docker作为演示 主要是Java编译麻烦还容易出问题(x\nDocker官方镜像\n不过官方镜像默认是反代aquadx.net，建议用这个镜像，提取码为 aqua，解压密码为 AquaDX\n这是我的一位朋友的镜像，他在我第一次部署服务器时给予了我很多帮助，在这里我感谢他\n下载解压好镜像后就配置一下服务器\n首先编辑 compose.yml 文件\n找到\nservices: http: image: caddy volumes: - ./Caddyfile:/etc/caddy/Caddyfile:ro ports: - 8080:8080 修改ports为自己的端口，避免 8080 这个端口冲突\n然后打开 application.properties 文件\n找到并修改 allnet.server.host allnet.server.redirect 和 aqua-net.email.webHost 项为自己的局域网IP\n# IP统一不能为127.0.0.1 allnet.server.host=192.168.0.102 allnet.server.port=80 # 这里是ALL.NET服务器端口 ... allnet.server.redirect=http://192.168.0.102:8080 # 这里是真实的服务器IP,建议修改为compose.yml设置的端口 ... server.port=80 #这里是web端口 ... aqua-net.email.webHost=192.168.0.102 aqua-net.email.webHost 是email服务器地址，不过我们一般不用这个服务，你可以把里面的ip删掉留空\n如果不配置文件出错或者不生效可以去 /AquaDX/config/application.properties 按照上面的方法继续设置\n接着在服务器根目录打开终端输入\ndocker compose up 然后可以喝杯咖啡☕等待部署完毕\n看到出现了 ⭐️ ALL PERFECT ⭐️ 表示你的服务器成功正常运行了 然后在浏览器打开 你的局域网IP:ALL.NET端口\n例如：\n我显示的是 ALL.Net : Port 80 web的地址就为 192.168.0.102:80\n或者输入 allnet.server.redirect 打开 192.168.0.102.8080\n80这个端口是Http端口，可以直接输入ip不带端口进入web\n最后进入web注册帐号，随便输入一个邮箱和用户名，点击注册\n然后登录你刚刚输入的邮箱和密码即可进入web\n注意：你不用去验证邮箱，可以直接登录，除非你开启了email验证，配置文件默认是关闭的\n和你获取dns和狗号的操作去配置segatools.ini\n享受你的本地服！\nARTEMIS 配置和部署\r施工中\u0026hellip;.\n","date": "232336-08-08 8:00:00",
    "updated": "232336-08-08 8:00:00"
  }, 
  {
    "objectID": "0b20c7d562f4b8a070204bcc018a7d67ee6dc232",
    "permalink": "/post/action/",
    "title": "使用Github Action","content": "\r什么是Github Action\rGitHub Actions 是 GitHub 提供的持续集成和持续（CI/CD）交付平台\n可以自动化构建、测试和部署流程，为编译测试提供了一些方便（比如又大又慢的臭Java）\n其中术语了解一下：\nWorkflow (工作流): 一个可配置的自动化流程，由 YAML 文件定义 Job (作业): 工作流中的一组步骤，在同一个运行器上执行 Step (步骤): 可以运行命令或执行动作的任务单元，这步骤可以是 Shell 命令（RUN） 调用预定义动作（USES） 自定义脚本 Action: 可重复使用的代码单元，可通过 GitHub Marketplace 获取现成动作 Runner (运行器): 执行工作流的服务器，可以是 GitHub 托管的或自托管的 Workflow文件存在仓库的 .github/workflows/ 路径下，文件后缀一般为 .yaml 或 .yml\n文件结构示意\nProject/ ├── .github/ │ └── workflows/ │ ├── ci.yml # 持续集成工作流 │ └── deploy.yml # 部署工作流 └── src/ 创建第一个工作流\r我以一份 .NET C#的项目 来演示\n在仓库中创建 .github/workflows 目录 在该目录下创建 dotnet-desktop.yaml 文件 （文件名随意，后缀必须为 yml 或者 yaml） 添加内容： 添加基本信息 name: .NET Core Desktop on: push: branches: [ \u0026amp;#34;master\u0026amp;#34; ] pull_request: branches: [ \u0026amp;#34;master\u0026amp;#34; ] 解析： 1.工作流名称：\u0026amp;#34;.NET Core Desktop\u0026amp;#34; 2.触发条件：推送到 master 分支或创建针对 master 分支的 PR 时触发 作业配置 jobs: build: strategy: matrix: configuration: [Debug, Release] runs-on: windows-latest env: Solution_Name: your-solution-name # 解决方案名称(.sln) Test_Project_Path: …","date": "15150-08-08 8:00:00",
    "updated": "15150-08-08 8:00:00"
  }]